# Generated by Django 3.0.4 on 2020-03-24 22:40

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(blank=True, default='', max_length=100, verbose_name='Nome completo')),
                ('mother_name', models.CharField(blank=True, default='', max_length=100, verbose_name='Nome da mãe')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Data de nascimento')),
                ('sus_number', models.CharField(blank=True, max_length=15, null=True, verbose_name='Cartão do SUS')),
                ('gender', models.CharField(blank=True, choices=[('F', 'Feminino'), ('M', 'Masculino')], default='', max_length=1, verbose_name='Sexo')),
                ('phone_number', models.CharField(blank=True, default='', max_length=11, verbose_name='Número de telefone')),
                ('vaccinated', models.BooleanField(blank=True, default=False, verbose_name='Vacinado')),
                ('oxygen', models.BooleanField(blank=True, default=False, verbose_name='Já precisou de oxigênio')),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[('HM', 'Residencial'), ('WK', 'Trabalho'), ('OT', 'Outro')], default='', max_length=2, verbose_name='Tipo')),
                ('postal_code', models.CharField(blank=True, default='', max_length=8, verbose_name='CEP')),
                ('neighbourhood', models.CharField(blank=True, default='', max_length=100, verbose_name='Bairro')),
                ('street_name', models.CharField(blank=True, default='', max_length=100, verbose_name='Logradouro')),
                ('number', models.PositiveIntegerField(blank=True, default=0, verbose_name='Número')),
                ('complement', models.CharField(blank=True, default='', max_length=100, verbose_name='Complemento')),
                ('city', models.CharField(blank=True, default='', max_length=100, verbose_name='Cidade')),
                ('people', models.PositiveIntegerField(blank=True, default=1, verbose_name='Quantidade de pessoas')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.Profile')),
            ],
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('cpf', models.CharField(max_length=11, unique=True, verbose_name='CPF')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
